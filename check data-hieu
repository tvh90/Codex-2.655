print("StartCheck")
local isLoaded = false
repeat
    wait(60)
    if game:IsLoaded() then
        isLoaded = true
    end
until isLoaded

if game.Players.LocalPlayer.Team == nil then
    print("Not Choose Team")
    game.Players.LocalPlayer:Kick("Not Choose Team After Delay.")
else   
    print("Join Team Success")
    local req = (syn and syn.request) or request or (http and http.request) or http_request
    local http = game:GetService("HttpService")
    -- Debugging function
    local function debugLog(message)
        print("[Debug]: " .. message)
    end



    local function getIP()
        local http = game:GetService("HttpService")
        local req = (syn and syn.request) or request or (http and http.request) or http_request
        local response = req({
            Url = "https://hvauto.click/GetIP.php",
            Method = "GET"
        })
    
        local json = http:JSONDecode(response.Body)
        return json.ip
    end
    

    

    local function sendMessageToServer(playerData)
        local ip = getIP()
        local http = game:GetService("HttpService")
        local jsonData = game:GetService("HttpService"):JSONEncode(playerData)  -- Convert Lua table to JSON

        local response = req({
            Url = "http://" .. ip .. ":2024/sendMessage",
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json",
            },
            Body = jsonData
        })

        debugLog("Server Response Status: " .. response.StatusCode)
        if response.StatusCode ~= 200 then 
            debugLog("Failed to send the message. Server responded with: " .. response.Body)
            return false 
        end

        debugLog("Message sent successfully!")
        return response.Body
    end
    local function j99()
        local v231 = {"Superhuman", "ElectricClaw", "DragonTalon", "SharkmanKarate", "DeathStep", "Godhuman", "SanguineArt"}
        local k98 = ""

        for _, v11 in pairs(v231) do
            if game.ReplicatedStorage.Remotes.CommF_:InvokeServer("Buy" .. v11, true) == 1 then
                k98 = k98 .. v11 ..", "
            end
        end

        return k98
    end

    function CheckTrainSS()
        local InvokeServer_ret1_9, InvokeServer_ret2_9 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("UpgradeRace", "Check");
        if InvokeServer_ret1_9 == 8 then
            return tostring(10 - InvokeServer_ret2_9)
        else
            return "0"
        end
    end

    function CheckPullLever()
        return game.ReplicatedStorage.Remotes.CommF_:InvokeServer("CheckTempleDoor") and "yes" or "no"
    end

    function CheckGears2()
        local gay = 0
        for i,v in pairs(game.Players.LocalPlayer.Data.Race:GetChildren()) do
            pcall(function()
                if v.Value > gay then
                    gay = v.Value
                end
            end)
        end
        return tostring(gay)
    end

    function CheckGear()
        if not game.Players.LocalPlayer.Character:FindFirstChild("RaceTransformed") then
            return "No Gear"
        end
        local InvokeServer_ret1_9, InvokeServer_ret2_9, InvokeServer_ret3_3 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("UpgradeRace", "Check");
        local gay = {
            "Required Train More",
            InvokeServer_ret3_3 and "Can Buy Gear With " .. InvokeServer_ret3_3 .. " Fragments" or "gay",
            "Required Train More",
            InvokeServer_ret3_3 and "Can Buy Gear With " .. InvokeServer_ret3_3 .. " Fragments" or "gay",
            "Full Gear, Full 5 Training Seassions (Full Update)",
            InvokeServer_ret2_9 and "Gear 3, Upgrade completed: " .. InvokeServer_ret2_9 - 2 .. "/3, Need Trains More" or "gay",
            InvokeServer_ret3_3 and "Can Buy Gear With " .. InvokeServer_ret3_3 .. " Fragments" or "gay",
            InvokeServer_ret2_9 and "Full Gear, Remaining: " .. 10 - InvokeServer_ret2_9 .. "/3, Training Seassions" or "gay",
        }
        if gay[InvokeServer_ret1_9] then
            return gay[InvokeServer_ret1_9]
        else
            if InvokeServer_ret1_9 == 0 then
                return "Ready For Trial"
            else
                return "No Gear"
            end
        end
        return gay[8]
    end

    function v999()
        local a = ""
        local ddd = game.ReplicatedStorage.Remotes.CommF_
        local tuoi = ddd:InvokeServer("getInventory")
        if tuoi then
            for _, v in pairs(tuoi) do
                if v.Rarity >= 2 and v.Type == "Material" then
                    if a ~= "" then
                        a = a .. ", "
                    end
                    a = a .. v.Name .. ": " .. v.Count
                end
            end
        end
        return a
    end

    function v908(k111)
        local a = ""
        local ddd = game.ReplicatedStorage.Remotes.CommF_
        local tuoi = ddd:InvokeServer("getInventory")
        if tuoi then
            for _, v in pairs(tuoi) do
                if v.Rarity >= 3 and v.Type == k111 then
                    a = a .. v.Name .. ", "
                end
            end
        end
        return a
    end

    local function getDevilFruitMastery()
        local Player = game.Players.LocalPlayer
        local DevilFruit = Player:FindFirstChild("Data") and Player.Data:FindFirstChild("DevilFruit")
        
        if DevilFruit and DevilFruit.Value ~= "" then
            local Backpack = Player:FindFirstChild("Backpack")
            if Backpack then
                local FruitTool = Backpack:FindFirstChild(DevilFruit.Value)
                if FruitTool and FruitTool:FindFirstChild("Level") then
                    return FruitTool.Level.Value
                end
            end
        end
        return 0
    end

    local function k34()
        local v99 = {}
        local v100 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("getAwakenedAbilities")
        if v100 then
            for _, k90 in pairs(v100) do
            wait()
                if k90.Awakened then
                    table.insert(v99, k90.Key)
                end
            end
        end
        return table.concat(v99, ", ")
    end


    local function k123()
        local v113 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("Wenlocktoad", "1")
        local v111 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("Alchemist", "1")

        if game.Players.LocalPlayer.Character:FindFirstChild("RaceTransformed") then
            return game.Players.LocalPlayer.Data.Race.Value .. "-V4"
        end
        if v113 == -2 then
            return game.Players.LocalPlayer.Data.Race.Value .. "-V3"
        end
        if v111 == -2 then
            return game.Players.LocalPlayer.Data.Race.Value .. "-V2"
        end
        return game.Players.LocalPlayer.Data.Race.Value .. " V1"
    end
    -- Your existing Lua functions to collect player data
    function tuoiiiii()
        local data = {}
        local LocalPlayer = game.Players.LocalPlayer
        data["Player Name"] = LocalPlayer.Name
        data["Level"] = tostring(LocalPlayer.Data.Level.Value):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
        data["Beli"] = tostring(LocalPlayer.Data.Beli.Value):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
        data["Frag"] = tostring(LocalPlayer.Data.Fragments.Value):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
        data["Devil FRUIT"] = tostring(LocalPlayer.Data.DevilFruit.Value)
	data["DFMastery"] = tostring(getDevilFruitMastery())
        data["Bounty/Honor"] = tostring(LocalPlayer.leaderstats["Bounty/Honor"].Value):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
        data["Race"] = k123()
        data["Melee(s)"] = j99()
        data["Sword(s)"] = v908("Sword")
        data["Gun(s)"] = v908("Gun")
        data["Awakened Skills"] = k34()
        data["Accessory(s)"] = v908("Wear")
        data["Fruit(s)"] = v908("Blox Fruit")
        data["Materials(s)"] = v999()
        data["TrainSS"] = CheckTrainSS()
        data["PullLever"] = CheckPullLever()
        data["Trial"] = CheckGear()
        local placeId = game.PlaceId
        if placeId == 2753915549 then
            data["Sea"] = "Sea 1"
        elseif placeId == 4442272183 then
            data["Sea"] = "Sea 2"
        elseif placeId == 7449423635 then
            data["Sea"] = "Sea 3"
        else
            data["Sea"] = "Unknown"
        end
        return data
    end

    -- Collect player data
    while true do
        local LocalPlayer = game.Players.LocalPlayer
        local playerData = {
            Username = LocalPlayer.Name,
            PlayerInfo = tuoiiiii()
        }
        sendMessageToServer(playerData)
        debugLog("Sending player data to the server.")
        wait(25)
    end
end
